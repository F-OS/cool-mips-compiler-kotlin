package ASTTransforms

import AST.*

interface Visitor {
	fun visit(node: Lambda)
	fun visit(node: BinaryOp)
	fun visit(node: UnaryOp)
	fun visit(node: ListAccess)
	fun visit(node: VariableAccess)
	fun visit(node: Modify)
	fun visit(node: ScopeOf)
	fun visit(node: Call)
	fun visit(node: IntegerNode)
	fun visit(node: Floating)
	fun visit(node: Bool)
	fun visit(node: StringLit)
	fun visit(node: CharNode)
	fun visit(node: If)
	fun visit(node: For)
	fun visit(node: ForEach)
	fun visit(node: While)
	fun visit(node: DoWhile)
	fun visit(node: Continue)
	fun visit(node: Break)
	fun visit(node: Label)
	fun visit(node: Switch)
	fun visit(node: Assignment)
	fun visit(node: Return)
	fun visit(node: Goto)
	fun visit(node: Try)
	fun visit(node: Throw)
	fun visit(node: ExprStatement)
	fun visit(node: Block)
	fun visit(node: SimpleVarDeclaration)
	fun visit(node: ArrayDeclaration)
	fun visit(node: EnumDeclaration)
	fun visit(node: ClassDeclaration)
	fun visit(node: StructDeclaration)
	fun visit(node: FunctionDeclaration)
}